// This sketch uses the hardware serial port for Bluetooth communication.

// Import the necessary libraries.
#include <Arduino.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  // Install in libraries pages
#include <LedControl.h>         // Install in libraries pages
#include <binary.h>

//MACROS are defined here
bool isConnect = false;
LedControl dotMatrixDisplay = LedControl(14, 16, 15, 1);
LiquidCrystal_I2C lcd16x2(0x27, 16, 2);

byte happy[8] = {
  0x3C,
  0x42,
  0x95,
  0xA1,
  0xA1,
  0x95,
  0x42,
  0x3C,
};

byte sad[8] = {
  0x3C,
  0x42,
  0xA5,
  0x91,
  0x91,
  0xA5,
  0x42,
  0x3C,
};

byte love[8] = {
  0x0C,
  0x1E,
  0x3E,
  0x7C,
  0x7C,
  0x3E,
  0x1E,
  0x0C,
};

byte circle[8] = {
  0x3C,
  0x7E,
  0xE7,
  0xC3,
  0xC3,
  0xE7,
  0x7E,
  0x3C,
};

byte squaree[8] = {
  0xFF,
  0xFF,
  0xC3,
  0xC3,
  0xC3,
  0xC3,
  0xFF,
  0xFF,
};

byte xx[8] = {
  0xC3,
  0xE7,
  0x7E,
  0x3C,
  0x3C,
  0x7E,
  0xE7,
  0xC3,
};

byte pacman[8] = {
  0x3C,
  0x7E,
  0xFF,
  0xFF,
  0xEB,
  0xE7,
  0x46,
  0x04,
};

byte house[8] = {
  0x08,
  0x0C,
  0xFE,
  0x9F,
  0x9F,
  0xFE,
  0x0C,
  0x08,
};

byte creaper[8] = {
  0x00,
  0x06,
  0x76,
  0x38,
  0x38,
  0x76,
  0x06,
  0x00,
};

#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093
#define NOTE_CS7 2217
#define NOTE_D7 2349
#define NOTE_DS7 2489
#define NOTE_E7 2637
#define NOTE_F7 2794
#define NOTE_FS7 2960
#define NOTE_G7 3136
#define NOTE_GS7 3322
#define NOTE_A7 3520
#define NOTE_AS7 3729
#define NOTE_B7 3951
#define NOTE_C8 4186
#define NOTE_CS8 4435
#define NOTE_D8 4699
#define NOTE_DS8 4978
#define REST 0

int buzzer = 9;

float getDistance(int trig, int echo) {
  pinMode(trig, OUTPUT);
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  pinMode(echo, INPUT);
  return pulseIn(echo, HIGH) / 58.0;
}

// Setup function runs once when the board is powered on.
void setup() {
  // Set the baud rate for the Bluetooth serial connection.
  Serial.begin(9600);
  pinMode(9, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, INPUT);

  lcd16x2.begin(16, 2, 1);
  lcd16x2.backlight();

  dotMatrixDisplay.shutdown(0, false);
  dotMatrixDisplay.setIntensity(0, 3);
  dotMatrixDisplay.clearDisplay(0);

  lcd16x2.print("Envision - HfA");
  lcd16x2.setCursor(1 - 1, 2 - 1);
  lcd16x2.print("V.0.1.6 BETA");
  Serial.print("Envision IDE\n");
  tone(9, 1760, 500);
  delay(500);
  tone(9, 1760, 500);
  delay(500);
}

// Loop function runs repeatedly forever.
void loop() {
  digitalWrite(10, true);

  Serial.print(String(getDistance(4, 3)) + " Cm\n");

  if ((digitalRead(12) == 0)) {
    if (isConnect) {
      digitalWrite(7, false);
      digitalWrite(5, false);
      digitalWrite(6, false);
      dotMatrixDisplay.clearDisplay(0);

      tone(9, 1760, 250);
      delay(250);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Envision - HfA");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print("V.0.1.6 BETA");
      // / LOG / // Serial.print("Log : reset\n");
    }
  }

  // Check if there is any data available from the Bluetooth serial connection.
  if (Serial.available()) {
    // Read the data from the Bluetooth serial connection.
    String data = Serial.readString();

    // Print the data to the serial monitor.
    // / LOG / // Serial.print("Data : " + data + "\n");

    // Auto generated by PictoBlox
    if ((data == "connected")) {
      digitalWrite(11, true);
      isConnect = true;

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Device :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print("connected");
    }

    if ((data == "disconnected")) {
      digitalWrite(11, false);
      isConnect = false;

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Device :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print("disconnected");
    }

    if ((data == "tone C2")) {
      tone(9, 65, 1000);
      delay(1000);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "tone D3")) {
      tone(9, 147, 1000);
      delay(1000);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "tone E4")) {
      tone(9, 330, 1000);
      delay(1000);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "tone F5")) {
      tone(9, 698, 1000);
      delay(1000);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "tone G6")) {
      tone(9, 1568, 1000);
      delay(1000);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "tone A7")) {
      tone(9, 3520, 1000);
      delay(1000);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "tone C8")) {
      tone(9, 4186, 1000);
      delay(1000);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "LED red")) {
      digitalWrite(6, true);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "LED blue")) {
      digitalWrite(5, true);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "LED green")) {
      digitalWrite(7, true);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "LED off")) {
      digitalWrite(7, false);
      digitalWrite(5, false);
      digitalWrite(6, false);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix happy")) {
      printByte(happy);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix sad")) {
      printByte(sad);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix love")) {
      printByte(love);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix Circle")) {
      printByte(circle);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix Square")) {
      printByte(squaree);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix X")) {
      printByte(xx);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix Pac-Man")) {
      printByte(pacman);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix house")) {
      printByte(house);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix creeper")) {
      printByte(creaper);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "Matrix off")) {
      dotMatrixDisplay.clearDisplay(0);

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "play Nokia")) {
      int tempo = 180;
      int melody[] = {
        NOTE_E5,
        8,
        NOTE_D5,
        8,
        NOTE_FS4,
        4,
        NOTE_GS4,
        4,
        NOTE_CS5,
        8,
        NOTE_B4,
        8,
        NOTE_D4,
        4,
        NOTE_E4,
        4,
        NOTE_B4,
        8,
        NOTE_A4,
        8,
        NOTE_CS4,
        4,
        NOTE_E4,
        4,
        NOTE_A4,
        2,
      };

      int notes = sizeof(melody) / sizeof(melody[0]) / 2;

      int wholenote = (60000 * 4) / tempo;

      int divider = 0, noteDuration = 0;

      for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

        divider = melody[thisNote + 1];
        if (divider > 0) {
          noteDuration = (wholenote) / divider;
        } else if (divider < 0) {
          noteDuration = (wholenote) / abs(divider);
          noteDuration *= 1.5;
        }

        tone(buzzer, melody[thisNote], noteDuration * 0.9);

        delay(noteDuration);

        noTone(buzzer);
      }

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "play Pac-Man")) {
      int tempo = 105;
      int melody[] = {

        NOTE_B4, 16, NOTE_B5, 16, NOTE_FS5, 16, NOTE_DS5, 16,
        NOTE_B5, 32, NOTE_FS5, -16, NOTE_DS5, 8, NOTE_C5, 16,
        NOTE_C6, 16, NOTE_G6, 16, NOTE_E6, 16, NOTE_C6, 32, NOTE_G6, -16, NOTE_E6, 8,

        NOTE_B4, 16, NOTE_B5, 16, NOTE_FS5, 16, NOTE_DS5, 16, NOTE_B5, 32,
        NOTE_FS5, -16, NOTE_DS5, 8, NOTE_DS5, 32, NOTE_E5, 32, NOTE_F5, 32,
        NOTE_F5, 32, NOTE_FS5, 32, NOTE_G5, 32, NOTE_G5, 32, NOTE_GS5, 32, NOTE_A5, 16, NOTE_B5, 8

      };

      int notes = sizeof(melody) / sizeof(melody[0]) / 2;

      int wholenote = (60000 * 4) / tempo;

      int divider = 0, noteDuration = 0;

      for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

        divider = melody[thisNote + 1];
        if (divider > 0) {
          noteDuration = (wholenote) / divider;
        } else if (divider < 0) {
          noteDuration = (wholenote) / abs(divider);
          noteDuration *= 1.5;
        }

        tone(buzzer, melody[thisNote], noteDuration * 0.9);

        delay(noteDuration);

        noTone(buzzer);
      }

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }

    if ((data == "play happy birthday")) {
      int tempo = 140;
      int melody[] = {

        NOTE_C4,
        4,
        NOTE_C4,
        8,
        NOTE_D4,
        -4,
        NOTE_C4,
        -4,
        NOTE_F4,
        -4,
        NOTE_E4,
        -2,
        NOTE_C4,
        4,
        NOTE_C4,
        8,
        NOTE_D4,
        -4,
        NOTE_C4,
        -4,
        NOTE_G4,
        -4,
        NOTE_F4,
        -2,
        NOTE_C4,
        4,
        NOTE_C4,
        8,

        NOTE_C5,
        -4,
        NOTE_A4,
        -4,
        NOTE_F4,
        -4,
        NOTE_E4,
        -4,
        NOTE_D4,
        -4,
        NOTE_AS4,
        4,
        NOTE_AS4,
        8,
        NOTE_A4,
        -4,
        NOTE_F4,
        -4,
        NOTE_G4,
        -4,
        NOTE_F4,
        -2,

      };

      int notes = sizeof(melody) / sizeof(melody[0]) / 2;

      int wholenote = (60000 * 4) / tempo;

      int divider = 0, noteDuration = 0;

      for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

        divider = melody[thisNote + 1];
        if (divider > 0) {
          noteDuration = (wholenote) / divider;
        } else if (divider < 0) {
          noteDuration = (wholenote) / abs(divider);
          noteDuration *= 1.5;
        }

        tone(buzzer, melody[thisNote], noteDuration * 0.9);

        delay(noteDuration);

        noTone(buzzer);
      }

      // Display lcd
      lcd16x2.clear();
      lcd16x2.print("Last command :");
      lcd16x2.setCursor(1 - 1, 2 - 1);
      lcd16x2.print(data);
    }
  }
  delay(250);
  digitalWrite(10, false);
  delay(250);
}

void printByte(byte character[]) {

  int i = 0;
  for (i = 0; i < 8; i++) {
    dotMatrixDisplay.setRow(0, i, character[i]);
  }
}